# It's good practice to write the GUI(graphical user interface) in this kv file. So we are using python for logic
# and the kv file for the graphic element of the app. The kivy file works on a hierarchy of levels. It imports
# certain objects from the kivy library and others are derived from our classes in our adjacent python code. The
# hierarchy is app --- ScreenManager --- screen. All design elements are handled within the kivi file.
<LoginScreen>:
    GridLayout:
        cols:1
    # These GridLayout calls mimic the structure of the display page, the main one reflecting the total surrounding border
    # and the others reflecting the various subsequent rows nested within the main border structure.
        GridLayout:
            cols:1
            # Observe the below style changes in this section.
            padding: 15, 15
            spacing: 20, 20
            Label:
                text:'User Login'
                font_size: '20sp'
                color: 0.2, 0.8, 0.8, 1
            TextInput:
                id: username
                hint_text: 'Username'
            TextInput:
                id: password
                password: True
                # When you set to true the text input is treated as a password input and will be replaced
                # with stars.
                hint_text: 'Password'
            RelativeLayout:
                Button:
                    text: 'Login'
                    on_press: root.login(root.ids.username.text, root.ids.password.text)
                    size_hint: 0.3, 0.5
                    pos_hint: {'center_x': 0.5, 'center_y': 0.6}
            Label:
                id: login_wrong
                text: ''

        GridLayout:
            cols:2
            # Why cols:2 - because the base of the display page has two other buttons: sign up and forgot password.
            # We delineate these by throwing an invisible two_column structure over them.
            padding: 10, 10
            spacing: 10, 0
            size_hint: 0.2, 0.2
# The above line instructs the forgot password/sign up columns to occupy 20% of screen at base.
            Button:
                text: 'Forgot password?'
                on_press: root.password_unknown()
                # See next set of hashtag comments for further context.
                background_color: 1, 1, 1, 0
                opacity: 1 if self.state == 'normal' else 0.5
                color: 0.1, 0.7, 1, 1
            Button:
                background_color: 1, 1, 1, 0
                opacity: 1 if self.state == 'normal' else 0.5
                color: 0.1, 0.7, 1, 1
                text: 'sign up'
                on_press: root.sign_up()
                # IMP: using the root. attribute will automatically revert to the root container or parent for this
                # code. In this case, it reverts to login screen and, by association the LoginScreen class in our
                # main python contain. The sign_up method is borrowed from loginScreen, thus we need to create a
                # function in our Loginscreen class. Please see relevant class for further understanding.

<SignUpScreen>
    GridLayout:
        cols: 1
        padding: 20, 20
        spacing: 20, 20
        Label:
            text: 'Sign up for access to a sample of the world\'s wisdom!'
        TextInput:
            id: username
            hint_text: 'Username'
        TextInput:
            id: password
            hint_text: 'Password'
        Button:
            text: 'Submit'
# If left as is this would do nothing, as the signup screen needs to be incorporated into the rest
# of the code via the root widget below.
            on_press: root.add_user(root.ids.username.text, root.ids.password.text)
            # on_press is an attribute that is available via kivi library. 'add_user' needs to be
            # created within the relevant class(see adjacent code).
            # The .text property allows you to convert the user input saved to memory as a readable script.

<ForgotPasswordScreen>:
    GridLayout:
        cols: 1
        Label:
            text: "Username"
        TextInput:
            id: username
            hint_text: "Username"
        Label:
            text: "New Password"
        TextInput:
            id: new_password
            hint_text: "Enter New Password"
        Button:
            text: "Change Password"
            on_press: root.change_password(root.ids.username.text,root.ids.new_password.text)
        Label:
            id: password_status
            text: ""



<SignUpScreenSuccess>:
    GridLayout:
        cols: 1
        Label:
            text: 'Sign up successful'
        Button:
            text: 'Login page'
            on_press: root.revert_to_main()

<LoginScreenSuccess>:
    GridLayout:
        cols: 1
        padding: 30, 30
        spacing: 30, 30
        RelativeLayout:
            ImageButton:
                on_press: root.log_out()
                # The below are derived from Hoverable module.
                source: 'logout_hover.png' if self.hovered else 'logout_nothover.png'
                size_hint: 0.40, 0.40
                pos_hint: {'center_x': 0.9, 'center_y': 0.8}
        Label:
            text: 'Which philosopher would you like to learn about?'
        TextInput:
            id: philosopher
            hint_text: 'Options to try: Schopenhauer, Nietzsche, Chomsky, Butler, Midgeley, Wittgenstein...'
        Button:
            text: 'Quote me.'
            on_press: root.get_quote(root.ids.philosopher.text)
        Button:
            text: 'Learn more about my theories.'
            on_press: root.get_bio(root.ids.philosopher.text)
        ScrollView:
            Label:
                id: quote
                text: ''
        # The below allows us to scroll along the printed output in the app.
                text_size: self.width, None
                size_hint_y: None
    # The below is a tuple and we are taking its second element.
    # The first value of tuple is the width and the second the height.
    # We use the below to make the text response changeable
    # based on the amount of text under the label.
                height: self.texture_size[1]
        ScrollView:
            Label:
                id: biography
                text: ''
                text_size: self.width, None
                size_hint_y: None
                height: self.texture_size[1]


# The below values inside the circumflex-type parameter is called a root in the kivy language. This root widget
# keeps a record of all the screens in the app. As it happens, all we have is the login screen. As the RootWidget is
# the parent of the loginscreen in its association with screenmanager, you could put it at the top of this script and
# put name etc. below.
<RootWidget>
    LoginScreen:
        name: 'login_screen'
    SignUpScreen:
        name: 'sign_up_screen'
    SignUpScreenSuccess:
        name: 'sign_up_screen_success'
    LoginScreenSuccess:
        name: 'login_screen_success'
    ForgotPasswordScreen:
        name: 'forgot_password_screen'

